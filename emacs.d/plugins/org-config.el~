(use-package org
  :config
  (setq org-hide-emphasis-markers t)
  (font-lock-add-keywords 'org-mode
			'(("^ *\\([-]\\) "
			   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'perfect-margin-mode)
  (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
			       ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
			       ((x-list-fonts "Verdana")         '(:font "Verdana"))
			       ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
			       (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
	 (base-font-color     (face-foreground 'default nil 'default))
	 (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
    
    (custom-theme-set-faces 'user
			    `(org-level-8 ((t (,@headline ,@variable-tuple))))
			    `(org-level-7 ((t (,@headline ,@variable-tuple))))
			    `(org-level-6 ((t (,@headline ,@variable-tuple))))
			    `(org-level-5 ((t (,@headline ,@variable-tuple))))
			    `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
			    `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
			    `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
			    `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
			    `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
   
  (add-hook 'org-mode-hook (lambda () (linum-relative-mode 0)))

  (setq org-capture-templates

	'(("s"
	   "School ToDo"
	   entry
	   (file+headline "~/Dropbox/org/todo.org" "School")
	   "* TODO %? %^G \n:PROPERTIES:\n:Created: %U\n:Deadline: %^t\n:END:\n"
	   )
	  ("e"
	   "Encephalo ToDo"
	   entry
	   (file+headline "~/Dropbox/org/todo.org" "Encephalo")
	   "* TODO %? %^G \n:PROPERTIES:\n:Created: %U\n:Deadline: %^t\n:END:\n"
	   )
	  
	  
	))
  
  :bind
  (("C-c a" . org-agenda)
   ("C-c c" . org-capture))


  )

;; config org-bullets
(use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda ()
			       (org-bullets-mode 1)
			       )))

(use-package org-roam
  :ensure t
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "/home/billr/Dropbox/org")
  (org-roam-index "init.org")
  :bind (:map org-roam-mode-map
	      (("C-c n l" . org-roam)
	       ("C-c n f" . org-roam-find-file)
	       ("C-c n g" . org-roam-graph))
	      :map org-mode-map
	      (("C-c n i" . org-roam-insert))
	      (("C-c n I" . org-roam-insert-immediate))))


(provide 'org-config)
